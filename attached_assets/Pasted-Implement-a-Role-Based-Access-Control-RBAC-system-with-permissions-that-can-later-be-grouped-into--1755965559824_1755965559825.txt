Implement a Role-Based Access Control (RBAC) system with permissions that can later be grouped into roles.

1. Create Permissions Catalog
Agreement Permissions (agreement.*):

agreement.sensitive_info â†’ Access sensitive information inside an agreement

agreement.create â†’ Create a new agreement

agreement.import â†’ Import an existing agreement

agreement.upload_notarized â†’ Upload notarized agreement PDF

agreement.edit â†’ Edit agreements (only before notarization)

agreement.view_info â†’ View agreement details

agreement.renew â†’ Renew agreements

agreement.view_all â†’ View all agreements

agreement.view_own â†’ View only own-created agreements

Additional Permissions:

user.manage â†’ Manage users (add, edit, assign roles)

role.manage â†’ Manage roles & permissions

logs.view â†’ View activity/audit logs

download.agreement â†’ Download agreements

share.agreement â†’ Share agreements externally

agreement.archive â†’ Archive/hide old agreements

ðŸ‘‰ Each permission must include:

A unique code (dot notation as above)

A human-readable description

2. Database & Backend Changes

Create permissions table â†’ (id, code, description)

Create roles table â†’ (id, name, description)

Create role_permissions table â†’ (role_id, permission_id)

Create user_roles table â†’ (user_id, role_id)

Middleware Rules:

Every API call must check if the logged-in user has the required permission.

Example:

POST /agreements â†’ requires agreement.create

GET /agreements/:id â†’ requires agreement.view_info + ownership check for customers

3. Frontend Enforcement

Fetch userâ€™s role & permissions on login.

Cache them in frontend state/session.

Hide or disable UI actions if user lacks permission.

Example:

If user lacks agreement.edit, disable Edit button.

If user lacks download.agreement, hide Download button.

4. API Guidelines

POST /permissions â†’ Add new permission

GET /permissions â†’ List all permissions

POST /roles â†’ Create role with assigned permissions

GET /roles â†’ List roles with their permissions

POST /assign-role â†’ Assign role(s) to user

5. Testing Requirements

Log in as different roles and confirm permissions work as expected.

Customers:

Can create/import in their own name only.

Cannot see/edit agreements of other customers.

After notarization â†’ agreement becomes read/download only.

Staff:

Can create/import/edit until notarization.

After notarization â†’ agreement is hidden from staff.

Super Admin:

Has full unrestricted access (bypasses all restrictions).

âœ… End Goal

A flexible RBAC system where:

Roles = bundles of permissions.

Permissions = exact actions across the system.

Easy to extend with new permissions in the future.